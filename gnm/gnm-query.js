// ‚úÖ gnm/gnm-loader.js ‚Äì —Å–∞–º–æ –∑–∞ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ db
const path = require("path");
const fs = require("fs");
const { OpenAIEmbeddings } = require("@langchain/openai");
const { Chroma } = require("@langchain/community/vectorstores/chroma");
const { RecursiveCharacterTextSplitter } = require("langchain/text_splitter");
const { Document } = require("langchain/document");

// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–º–µ JSON fallback (–º–æ–∂–µ –∏ –æ—Ç PDF)
const gnmJson = JSON.parse(fs.readFileSync(path.join(__dirname, "gnm-knowledge.json"), "utf8"));

// üîç –ü—Ä–µ–≤—Ä—ä—â–∞–º–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∏
const docs = gnmJson.map(entry => new Document({ pageContent: `${entry.question}\n${entry.answer}` }));

// ‚úÖ –†–∞–∑–±–∏–≤–∞–Ω–µ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ (–∞–∫–æ –∏—Å–∫–∞—à –ø–æ-—Ñ–∏–Ω –∫–æ–Ω—Ç—Ä–æ–ª)
const splitter = new RecursiveCharacterTextSplitter({ chunkSize: 300, chunkOverlap: 30 });

async function run() {
  const splitDocs = await splitter.splitDocuments(docs);
  const embeddings = new OpenAIEmbeddings({ openAIApiKey: process.env.OPENAI_API_KEY });

  await Chroma.fromDocuments(splitDocs, embeddings, {
    collectionName: "gnm-docs",
    indexPath: path.join(__dirname, "db")  // üëâ –∑–∞–ø–∏—Å–≤–∞ —Ç—É–∫
  });

  console.log("‚úÖ GNM index created at /gnm/db");
}

run();
